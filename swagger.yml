openapi: 3.0.0
info:
  description: "This is a sample server movie server. You can authorize with JWT and put movies to database"
  version: "1.0.0"
  title: "Movie Swagger"
  contact:
    email: "jjkowalinski@yahoo.com"
host: "localhost:3000"
basePath: "/"
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /auth:
    post:
      summary: Authorized a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Token object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Invalid payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "invalid payload no body"
        '401':
          description: Unauthorized user
  /users:
    get:
      summary: Returns a list of users.
      responses:
        '200':
          description: A JSON array of users
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    role:
                      type: string
                    name:
                      type: string
                    username:
                      type: string
                    password:
                      type: string
                    moviesUploaded:
                      type: integer
                      format: int64
                    movies:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            format: int64
                          title:
                            type: string
                          released:
                            type: string
                            format: date
                          genre:
                            type: string
                          directory:
                            type: string
  /movies:
    get:
      summary: Return a list of movies.
      responses:
        '200':
          description: A JSON array of movies
          content:
            application/json:
              schema: 
                type: array
                items: 
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                    role:
                      type: string
                    name:
                      type: string
                    username:
                      type: string
                    password:
                      type: string
                    moviesUploaded:
                      type: integer
                      format: int64
                    movies:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            format: int64
                          title:
                            type: string
                          released:
                            type: string
                            format: date
                          genre:
                            type: string
                          directory:
                            type: string
                    user:
                      type: object
                      properties:
                        id:
                          type: integer
                          format: int64
                        role:
                          type: string
                        name:
                          type: string
                        username:
                          type: string
                        password:
                          type: string
                        moviesUploaded:
                          type: integer
                          format: int64
  /movie:
    post:
      summary: Add movie to database.
      security:
        - Bearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
      responses:
        '200':
          description: Token object.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
        '400':
          description: Missing movie title
        '401':
          description: Missing authorization
        '403':
          description: Basic user used all free uploads
        '500':
          description: Internal sever error